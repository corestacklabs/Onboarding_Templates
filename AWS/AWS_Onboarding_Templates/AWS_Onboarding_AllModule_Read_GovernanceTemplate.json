{
    "AWSTemplateFormatVersion":"2010-09-09",
    "Description":"Creates a new IAM role for your AWS Master account with ReadOnlyAccess permissions needed for CloudOps, Finops & SecOps Bundle",
    "Parameters":{
       "RoleName":{
          "Type":"String",
          "Description":"The name of the IAM role to create. Use alphanumeric and '+=,.@-_' characters.",
          "AllowedPattern":"[\\w+=,.@-]{1,64}",
          "MinLength":"1",
          "MaxLength":"64"
       },
       "ExternalId":{
          "Type":"String",
          "Description":"The external ID can be any word or number that is agreed upon between you and the third-party (Corestack - 028811834831) account. Use alphanumeric and '=,.@:\/-' characters.",
          "AllowedPattern":"[a-zA-Z0-9=,.@:\/-]*",
          "MinLength":"1",
          "MaxLength":"64"
       },
       "AWSCostAndUsageReportCURBucketName":{
          "Type":"String",
          "Description":"The name of the Cost and Usage Report (CUR) S3 bucket name to get Cost details. NOTE: THIS IS AN OPTIONAL PARAMETER, SHOULD BE INCLUDED FOR AWS MANAGEMENT/LINKED/STANDARD ACCOUNTS FOR WHICH CUR IS ENABLED!!!!Use lowercase letters, numbers, periods (.), hyphens (-), and underscores (_)",
          "AllowedPattern":"^[a-z0-9\\.\\-\\_]*$",
          "MinLength":"0",
          "MaxLength":"64"
       },
       "ConfigPermissionInclude":{
          "Type":"String",
          "Description":"Permission to include AWS Config Read Access",
          "Default":"Allow",
          "AllowedValues":[
             "Allow",
             "Deny"
          ]
       },
       "EnforceMFA":{
          "Description":"Flag to enforce MFA (Multi-Factor Authentication) when Assuming the role.",
          "Type":"String",
          "Default":"false",
          "AllowedValues":[
             "true",
             "false"
          ]
       },
       "CoreStackAccountId":{
          "Type":"String",
          "Description":"The AWS Account ID of Corestack.",
          "Default":"028811834831"
       },
       "AssessmentPermissionInclude":{
        "Type":"String",
        "Description":"Permission to include Wellarchitected Read & Write Access",
        "Default":"Deny",
        "AllowedValues":[
           "Allow",
           "Deny"
        ]
     }

    },

    "Conditions":{
       "IncludeMFACondition":{
          "Fn::Equals":[
             {
                "Ref":"EnforceMFA"
             },
             "true"
          ]
       },
       "BucketNotEmpty":{
          "Fn::Not":[
             {
                "Fn::Equals":[
                   {
                      "Ref":"AWSCostAndUsageReportCURBucketName"
                   },
                   ""
                ]
             }
          ]
       },
       "ConfigAllow":{
          "Fn::Not":[
             {
                "Fn::Equals":[
                   {
                      "Ref":"ConfigPermissionInclude"
                   },
                   "Deny"
                ]
             }
          ]
       },
       "AssessmentAllow":{
        "Fn::Not":[
           {
              "Fn::Equals":[
                 {
                    "Ref":"AssessmentPermissionInclude"
                 },
                 "Deny"
              ]
           }
        ]
     }

    },
    "Resources":{
       "Role":{
          "Type":"AWS::IAM::Role",
          "Properties":{
             "RoleName":{
                "Ref":"RoleName"
             },
             "AssumeRolePolicyDocument":{
                "Version":"2012-10-17",
                "Statement":[
                   {
                      "Effect":"Allow",
                      "Principal":{
                         "AWS":{
                            "Fn::Join":[
                               "",
                               [
                                  "arn:aws:iam::",
                                  {
                                     "Ref":"CoreStackAccountId"
                                  },
                                  ":root"
                               ]
                            ]
                         }
                      },
                      "Condition":{
                         "Fn::If":[
                            "IncludeMFACondition",
                            {
                               "StringEquals":{
                                  "sts:ExternalId":{
                                     "Ref":"ExternalId"
                                  }
                               },
                               "Bool":{
                                  "aws:MultiFactorAuthPresent":"true"
                               }
                            },
                            {
                               "StringEquals":{
                                  "sts:ExternalId":{
                                     "Ref":"ExternalId"
                                  }
                               }
                            }
                         ]
                      },
                      "Action":[
                         "sts:AssumeRole"
                      ]
                   }
                ]
             },
             "Path": "/",
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/ReadOnlyAccess"
				],
             "Tags":[
                {
                   "Key":"Purpose",
                   "Value":"CoreStack"
                }
             ]
          }
       },
       "BudgetAndBillingPolicy":{
          "Type":"AWS::IAM::Policy",
          "Properties":{
             "PolicyName":"CoreStack_BudgetAndBillingPolicy",
             "PolicyDocument":{
                "Statement":[
                   {
                      "Sid":"Auth",
                      "Action":[
                         "budgets:ViewBudget",
                         "budgets:DescribeBudgetActionHistories",
                         "budgets:DescribeBudgetActionsForAccount"
                      ],
                      "Effect":"Allow",
                      "Resource":"*"
                   }
                ]
             },
             "Roles":[
                {
                   "Ref":"Role"
                }
             ]
          }
       },
       "SupportAndRIPolicy":{
          "Type":"AWS::IAM::Policy",
          "Properties":{
             "PolicyName":"CoreStack_SupportAndRIPolicy",
             "PolicyDocument":{
                "Statement":[
                   {
                      "Sid":"Auth",
                      "Action":[
                         "ce:GetReservationPurchaseRecommendation",
                         "ce:GetReservationUtilization",
                         "ce:DescribeNotificationSubscription",
                         "ce:GetReservationCoverage",
                         "support:DescribeServices",
                         "support:DescribeSupportLevel",
                         "support:DescribeTrustedAdvisorCheckResult"
                      ],
                      "Effect":"Allow",
                      "Resource":"*"
                   }
                ]
             },
             "Roles":[
                {
                   "Ref":"Role"
                }
             ]
          }
       },
       "AWSCURAccessPolicy":{
          "Type":"AWS::IAM::Policy",
          "Condition":"BucketNotEmpty",
          "Properties":{
             "PolicyName":"CoreStack_AWSCURAccessPolicy",
             "PolicyDocument":{
                "Statement":[
                   {
                      "Sid":"Auth",
                      "Action":[
                         "s3:GetObject"
                      ],
                      "Effect":"Allow",
                      "Resource":{
                         "Fn::Join":[
                            "",
                            [
                               "arn:aws:s3:::",
                               {
                                  "Ref":"AWSCostAndUsageReportCURBucketName"
                               },
                               "/*"
                            ]
                         ]
                      }
                   }
                ]
             },
             "Roles":[
                {
                   "Ref":"Role"
                }
             ]
          }
       },
       "ComputeOptimizerPolicy":{
          "Type":"AWS::IAM::Policy",
          "Properties":{
             "PolicyName":"CoreStack_ComputeOptimizerPolicy",
             "PolicyDocument":{
                "Statement":[
                   {
                      "Sid":"Auth",
                      "Action":[
                         "compute-optimizer:DescribeRecommendationExportJobs",
                         "compute-optimizer:GetAutoScalingGroupRecommendations",
                         "compute-optimizer:GetEBSVolumeRecommendations",
                         "compute-optimizer:GetEC2InstanceRecommendations",
                         "compute-optimizer:GetEC2RecommendationProjectedMetrics",
                         "compute-optimizer:GetECSServiceRecommendationProjectedMetrics",
                         "compute-optimizer:GetECSServiceRecommendations",
                         "compute-optimizer:GetEffectiveRecommendationPreferences",
                         "compute-optimizer:GetEnrollmentStatus",
                         "compute-optimizer:GetLambdaFunctionRecommendations",
                         "compute-optimizer:GetRecommendationPreferences",
                         "compute-optimizer:GetRecommendationSummaries"
                      ],
                      "Effect":"Allow",
                      "Resource":"*"
                   }
                ]
             },
             "Roles":[
                {
                   "Ref":"Role"
                }
             ]
          }
       },
    "ConfigPermission":{
         "Type":"AWS::IAM::Policy",
	 "Condition":"ConfigAllow",
         "Properties":{
            "PolicyName":"CoreStack_ConfigPermission",
            "PolicyDocument":{
               "Statement":[
                  {
                     "Sid":"Auth",
                     "Action":[
                        "config:DeleteConfigRule",
                        "config:PutConfigRule",
                        "config:PutEvaluations",
                        "config:TagResource"
                     ],
                     "Effect":"Allow",
                     "Resource":"*"
                  }
               ]
            },
            "Roles":[
               {
                  "Ref":"Role"
               }
            ]
         }
      },
      "TaggingGovernance":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"CoreStack_TaggingGovernance",
            "PolicyDocument":{
               "Statement":[
                  {
                     "Sid":"Auth",
                     "Action":[
                        "appstream:TagResource",
                        "cloudformation:TagResource",
                        "cloudfront:TagResource",
                        "cloudtrail:AddTags",
                        "cloudwatch:TagResource",
                        "directconnect:TagResource",
                        "ds:AddTagsToResource",
                        "dynamodb:TagResource",
                        "ec2:CreateTags",
                        "ec2:DeleteTags",
                        "ec2:UpdateTags",
                        "ecs:TagResource",
                        "eks:TagResource",
                        "elasticache:AddTagsToResource",
                        "elasticfilesystem:CreateTags",
                        "elasticfilesystem:TagResource",
                        "elasticloadbalancing:AddTags",
                        "es:AddTags",
                        "guardduty:TagResource",
                        "iam:TagRole",
                        "inspector:SetTagsForResource",
                        "kinesis:AddTagsToStream",
                        "kms:TagResource",
                        "kms:UntagResource",
                        "lambda:AddTagsToResource",
                        "lambda:TagResource",
                        "lightsail:TagResource",
                        "organizations:TagResource",
                        "rds:AddTagsToResource",
                        "redshift:CreateTags",
                        "s3:DeleteObjectTagging",
                        "s3:PutBucketTagging",
                        "s3:PutObjectTagging", 
			"pi:getResourceMetrics",
                        "s3:PutObjectVersionTagging",
                        "secretsmanager:TagResource",
                        "secretsmanager:UntagResource",
                        "sns:TagResource",
                        "sqs:TagQueue",
                        "tag:TagResources",
                        "waf:TagResource",
                        "workspaces:CreateTags",
                        "workspaces:DeleteTags",
			"route53resolver:TagResource"
                     ],
                     "Effect":"Allow",
                     "Resource":"*"
                  }
               ]
            },
            "Roles":[
               {
                  "Ref":"Role"
               }
            ]
         }
      },
      "AssessmentWritePermission":{
         "Type":"AWS::IAM::Policy",
         "Condition":"AssessmentAllow",
         "Properties":{
            "PolicyName":"CoreStack_AssessmentWritePermission",
            "PolicyDocument":{
               "Statement":[
                  {
                     "Sid":"Auth",
                     "Action":[
                        "wellarchitected:AssociateLenses",
                        "wellarchitected:CreateMilestone",
                        "wellarchitected:CreateWorkload",
                        "wellarchitected:UpdateAnswer",
			"wellarchitected:DisassociateLenses"
                     ],
                     "Effect":"Allow",
                     "Resource":"*"
                  }
               ]
            },
            "Roles":[
               {
                  "Ref":"Role"
               }
            ]
         }
      },
      "IAMWritePermission":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"CoreStack_IAMWritePermission",
            "PolicyDocument":{
               "Statement":[
                  {
                     "Sid":"Auth",
                     "Action":[
                        "iam:CreateRole",
                        "iam:CreateServiceLinkedRole",
                        "iam:DeleteRole",
                        "iam:DeleteRolePolicy",
                        "iam:PutRolePolicy",
                        "iam:UpdateAssumeRolePolicy",
			"iam:Generate*"
                     ],
                     "Effect":"Allow",
                     "Resource":"*"
                  }
               ]
            },
            "Roles":[
               {
                  "Ref":"Role"
               }
            ]
         }
      },
      "InventoryWritePolicy":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"CoreStack_InventoryWritePolicy",
            "PolicyDocument":{
               "Statement":[
                  {
                     "Sid":"Auth",
                     "Action":[
                        "autoscaling:AttachInstances",
                        "cloudformation:CreateStack",
                        "cloudformation:DeleteStack",
                        "cloudformation:UpdateStack",
                        "cloudtrail:CreateTrail",
                        "cloudtrail:DeleteTrail",
                        "cloudtrail:PutEventSelectors",
                        "cloudtrail:StartLogging",
                        "cloudtrail:UpdateTrail",
			"cloudtrail:LookupEvents",
                        "cloudwatch:DeleteAlarms",
                        "cloudwatch:DisableAlarmActions",
                        "cloudwatch:EnableAlarmActions",
                        "cloudwatch:PutMetricAlarm",
                        "dms:DeleteEndpoint",
                        "dms:DeleteReplicationInstance",
                        "dms:DeleteReplicationTask",
                        "dynamodb:CreateTable",
                        "dynamodb:DeleteTable",
                        "dynamodb:UpdateTable",
                        "ec2:AllocateAddress",
                        "ec2:AssociateIamInstanceProfile",
                        "ec2:AttachNetworkInterface",
                        "ec2:AttachVolume",
                        "ec2:CancelSpotFleetRequests",
                        "ec2:CancelSpotInstanceRequests",
                        "ec2:CopySnapshot",
                        "ec2:Create*",
                        "ec2:Delete*",
                        "ec2:DeregisterImage",
                        "ec2:DetachNetworkInterface",
                        "ec2:DetachVolume",
                        "ec2:DisassociateAddress",
                        "ec2:DisassociateSubnetCidrBlock",
                        "ec2:EnableVolumeIO",
                        "ec2:Modify*",
                        "ec2:MonitorInstances",
                        "ec2:RebootInstances",
                        "ec2:RegisterImage",
                        "ec2:ReleaseAddress",
                        "ec2:RunInstances",
                        "ec2:StartInstances",
                        "ec2:StopInstances",
                        "ec2:TerminateInstances",
                        "ec2:UnmonitorInstances",
                        "ecr:BatchDeleteImage",
                        "ecs:CreateCluster",
                        "ecs:DeleteCluster",
                        "ecs:UpdateCluster",
                        "elasticache:Delete*",
                        "elasticloadbalancing:CreateLoadBalancer",
                        "elasticloadbalancing:DeleteLoadBalancer",
                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                        "elasticloadbalancing:ModifyLoadBalancerAttributes",
                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                        "fsx:DeleteBackup",
                        "fsx:DeleteFileSystem",
                        "guardduty:CreateDetector",
                        "guardduty:CreatePublishingDestination",
                        "guardduty:DeleteDetector",
                        "guardduty:DeletePublishingDestination",
                        "guardduty:UpdateDetector",
                        "iam:UpdateAssumeRolePolicy",
                        "kms:CancelKeyDeletion",
                        "kms:Create*",
                        "kms:Delete*",
                        "kms:Disable*",
                        "kms:Enable*",
                        "kms:Put*",
                        "kms:ReplicateKey",
                        "kms:Revoke*",
                        "kms:ScheduleKeyDeletion",
                        "kms:Update*",
                        "lambda:CreateFunction",
                        "lambda:DeleteFunction",
                        "lightsail:Delete*",
                        "lightsail:RebootInstance",
                        "lightsail:StartInstance",
                        "lightsail:StopInstance",
                        "logs:DeleteLogGroup",
                        "rds:Create*",
                        "rds:Delete*",
                        "rds:Modify*",
                        "rds:RebootDBInstance",
                        "rds:RestoreDBInstanceFromDBSnapshot",
                        "rds:Start*",
                        "rds:Stop*",
                        "redshift:DeleteClusterSecurityGroup",
                        "redshift:DeleteClusterSubnetGroup",
			"redshift:DeleteClusterSnapshot",
                        "s3:CreateBucket",
                        "s3:DeleteBucket",
                        "s3:DeleteObject",
                        "s3:Put*",
                        "s3:RestoreObject",
                        "secretsmanager:RestoreSecret",
                        "ses:DeleteConfigurationSet",
                        "sns:CreateTopic",
                        "sns:DeleteEndpoint",
                        "sns:DeleteTopic",
                        "ssm:CancelCommand",
                        "ssm:SendCommand",
                        "ssm:StartAutomationExecution",
                        "ssm:StopAutomationExecution",
                        "workspaces:ModifyWorkspaceProperties",
                        "workspaces:RebootWorkspaces",
                        "workspaces:StartWorkspaces",
                        "workspaces:StopWorkspaces",
                        "workspaces:TerminateWorkspaces"
                     ],
                     "Effect":"Allow",
                     "Resource":"*"
                  }
               ]
            },
            "Roles":[
               {
                  "Ref":"Role"
               }
            ]
         }
      }
    },
    "Outputs":{
       "RoleARN":{
          "Description":"ARN of the IAM Role.",
          "Value":{
             "Fn::GetAtt":[
                "Role",
                "Arn"
             ]
          }
       },
       "ExternalId":{
          "Description":"ExternalId used in Role trusted policy.",
          "Value":{
             "Ref":"ExternalId"
          }
       },
       "MFAEnabled":{
          "Description":"Flag to identify MFA enforced for the role or not.",
          "Value":{
             "Ref":"EnforceMFA"
          }
       }
    }
 }
